# 数据采集系统 .gitignore
# 忽略编译产生的中间文件和可执行文件

# ===========================================
# C/C++ 编译文件 (data-reader)
# ===========================================

# 目标文件
*.o
*.obj
*.elf

# 可执行文件
*.exe
*.out
*.app

# 静态库
*.a
*.lib

# 动态库
*.so
*.so.*
*.dylib
*.dll

# 调试文件
*.pdb
*.ilk
*.map
*.dSYM/
*.su
*.idb

# 编译器生成的文件
*.d
*.dep

# ===========================================
# Rust 编译文件 (data-processor)
# ===========================================

# Rust编译输出目录
data-processor/target/

# Cargo锁文件 (通常应该提交，但如果是库项目可以忽略)
# data-processor/Cargo.lock

# ===========================================
# 运行时生成的文件
# ===========================================

# 数据文件
raw_frames_*.txt
processed_data_*.json

# 日志文件
*.log
*.logs

# 临时文件
*.tmp
*.temp
*.swp
*.swo
*~

# ===========================================
# 开发工具文件
# ===========================================

# Visual Studio Code
.vscode/
*.code-workspace

# Visual Studio
.vs/
*.vcxproj.user
*.vcxproj.filters
*.sln.docstates

# CLion
.idea/
cmake-build-*/

# ===========================================
# 系统文件
# ===========================================

# Windows
Thumbs.db
ehthumbs.db
Desktop.ini
$RECYCLE.BIN/

# macOS
.DS_Store
.AppleDouble
.LSOverride

# Linux
*~

# ===========================================
# 安装程序和下载文件
# ===========================================

# Visual Studio Build Tools安装程序
vs_buildtools.exe
rustup-init.exe

# ===========================================
# 测试和调试文件
# ===========================================

# 测试结果
test_results.md
test_output.txt

# 性能分析文件
*.prof
*.trace

# 内存转储
*.dmp
core.*

# ===========================================
# 备份文件
# ===========================================

*.bak
*.backup
*.orig
*.rej

# ===========================================
# 项目特定的忽略
# ===========================================

# 共享内存测试文件
shared_mem_test.*

# 配置文件的本地副本
config.local.*
settings.local.*

# 证书和密钥文件
*.pem
*.key
*.crt
*.p12
*.pfx
/data-processor/target
